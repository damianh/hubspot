// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExternalLegalConsentOptions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The communicationConsentCheckboxes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalCommunicationConsentCheckbox>? CommunicationConsentCheckboxes { get; set; }
#nullable restore
#else
        public List<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalCommunicationConsentCheckbox> CommunicationConsentCheckboxes { get; set; }
#endif
        /// <summary>The communicationConsentText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommunicationConsentText { get; set; }
#nullable restore
#else
        public string CommunicationConsentText { get; set; }
#endif
        /// <summary>The isLegitimateInterest property</summary>
        public bool? IsLegitimateInterest { get; set; }
        /// <summary>The legitimateInterestLegalBasis property</summary>
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions_legitimateInterestLegalBasis? LegitimateInterestLegalBasis { get; set; }
        /// <summary>The legitimateInterestSubscriptionTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? LegitimateInterestSubscriptionTypes { get; set; }
#nullable restore
#else
        public List<long?> LegitimateInterestSubscriptionTypes { get; set; }
#endif
        /// <summary>The privacyPolicyText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrivacyPolicyText { get; set; }
#nullable restore
#else
        public string PrivacyPolicyText { get; set; }
#endif
        /// <summary>The processingConsentCheckboxLabel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessingConsentCheckboxLabel { get; set; }
#nullable restore
#else
        public string ProcessingConsentCheckboxLabel { get; set; }
#endif
        /// <summary>The processingConsentFooterText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessingConsentFooterText { get; set; }
#nullable restore
#else
        public string ProcessingConsentFooterText { get; set; }
#endif
        /// <summary>The processingConsentText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessingConsentText { get; set; }
#nullable restore
#else
        public string ProcessingConsentText { get; set; }
#endif
        /// <summary>The processingConsentType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessingConsentType { get; set; }
#nullable restore
#else
        public string ProcessingConsentType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions"/> and sets the default values.
        /// </summary>
        public ExternalLegalConsentOptions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "communicationConsentCheckboxes", n => { CommunicationConsentCheckboxes = n.GetCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalCommunicationConsentCheckbox>(global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalCommunicationConsentCheckbox.CreateFromDiscriminatorValue)?.AsList(); } },
                { "communicationConsentText", n => { CommunicationConsentText = n.GetStringValue(); } },
                { "isLegitimateInterest", n => { IsLegitimateInterest = n.GetBoolValue(); } },
                { "legitimateInterestLegalBasis", n => { LegitimateInterestLegalBasis = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions_legitimateInterestLegalBasis>(); } },
                { "legitimateInterestSubscriptionTypes", n => { LegitimateInterestSubscriptionTypes = n.GetCollectionOfPrimitiveValues<long?>()?.AsList(); } },
                { "privacyPolicyText", n => { PrivacyPolicyText = n.GetStringValue(); } },
                { "processingConsentCheckboxLabel", n => { ProcessingConsentCheckboxLabel = n.GetStringValue(); } },
                { "processingConsentFooterText", n => { ProcessingConsentFooterText = n.GetStringValue(); } },
                { "processingConsentText", n => { ProcessingConsentText = n.GetStringValue(); } },
                { "processingConsentType", n => { ProcessingConsentType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalCommunicationConsentCheckbox>("communicationConsentCheckboxes", CommunicationConsentCheckboxes);
            writer.WriteStringValue("communicationConsentText", CommunicationConsentText);
            writer.WriteBoolValue("isLegitimateInterest", IsLegitimateInterest);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLegalConsentOptions_legitimateInterestLegalBasis>("legitimateInterestLegalBasis", LegitimateInterestLegalBasis);
            writer.WriteCollectionOfPrimitiveValues<long?>("legitimateInterestSubscriptionTypes", LegitimateInterestSubscriptionTypes);
            writer.WriteStringValue("privacyPolicyText", PrivacyPolicyText);
            writer.WriteStringValue("processingConsentCheckboxLabel", ProcessingConsentCheckboxLabel);
            writer.WriteStringValue("processingConsentFooterText", ProcessingConsentFooterText);
            writer.WriteStringValue("processingConsentText", ProcessingConsentText);
            writer.WriteStringValue("processingConsentType", ProcessingConsentType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
