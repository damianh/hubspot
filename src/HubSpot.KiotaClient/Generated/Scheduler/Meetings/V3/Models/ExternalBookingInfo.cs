// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExternalBookingInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allUsersBusyTimes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalUserBusyTimes>? AllUsersBusyTimes { get; set; }
#nullable restore
#else
        public List<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalUserBusyTimes> AllUsersBusyTimes { get; set; }
#endif
        /// <summary>The brandingMetadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata? BrandingMetadata { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata BrandingMetadata { get; set; }
#endif
        /// <summary>The customParams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalMeetingsLinkSettings? CustomParams { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalMeetingsLinkSettings CustomParams { get; set; }
#endif
        /// <summary>The isOffline property</summary>
        public bool? IsOffline { get; set; }
        /// <summary>The linkAvailability property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLinkAvailability? LinkAvailability { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLinkAvailability LinkAvailability { get; set; }
#endif
        /// <summary>The linkId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LinkId { get; set; }
#nullable restore
#else
        public string LinkId { get; set; }
#endif
        /// <summary>The linkType property</summary>
        public global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo_linkType? LinkType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo"/> and sets the default values.
        /// </summary>
        public ExternalBookingInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allUsersBusyTimes", n => { AllUsersBusyTimes = n.GetCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalUserBusyTimes>(global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalUserBusyTimes.CreateFromDiscriminatorValue)?.AsList(); } },
                { "brandingMetadata", n => { BrandingMetadata = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata>(global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata.CreateFromDiscriminatorValue); } },
                { "customParams", n => { CustomParams = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalMeetingsLinkSettings>(global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalMeetingsLinkSettings.CreateFromDiscriminatorValue); } },
                { "isOffline", n => { IsOffline = n.GetBoolValue(); } },
                { "linkAvailability", n => { LinkAvailability = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLinkAvailability>(global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLinkAvailability.CreateFromDiscriminatorValue); } },
                { "linkId", n => { LinkId = n.GetStringValue(); } },
                { "linkType", n => { LinkType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo_linkType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalUserBusyTimes>("allUsersBusyTimes", AllUsersBusyTimes);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata>("brandingMetadata", BrandingMetadata);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalMeetingsLinkSettings>("customParams", CustomParams);
            writer.WriteBoolValue("isOffline", IsOffline);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalLinkAvailability>("linkAvailability", LinkAvailability);
            writer.WriteStringValue("linkId", LinkId);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBookingInfo_linkType>("linkType", LinkType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
