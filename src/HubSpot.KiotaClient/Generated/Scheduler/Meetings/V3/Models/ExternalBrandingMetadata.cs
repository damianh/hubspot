// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExternalBrandingMetadata : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accent2Color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Accent2Color { get; set; }
#nullable restore
#else
        public string Accent2Color { get; set; }
#endif
        /// <summary>The accentColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccentColor { get; set; }
#nullable restore
#else
        public string AccentColor { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The companyAddressLine1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyAddressLine1 { get; set; }
#nullable restore
#else
        public string CompanyAddressLine1 { get; set; }
#endif
        /// <summary>The companyAddressLine2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyAddressLine2 { get; set; }
#nullable restore
#else
        public string CompanyAddressLine2 { get; set; }
#endif
        /// <summary>The companyAvatar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyAvatar { get; set; }
#nullable restore
#else
        public string CompanyAvatar { get; set; }
#endif
        /// <summary>The companyCity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyCity { get; set; }
#nullable restore
#else
        public string CompanyCity { get; set; }
#endif
        /// <summary>The companyCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyCountry { get; set; }
#nullable restore
#else
        public string CompanyCountry { get; set; }
#endif
        /// <summary>The companyDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyDomain { get; set; }
#nullable restore
#else
        public string CompanyDomain { get; set; }
#endif
        /// <summary>The companyName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>The companyState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyState { get; set; }
#nullable restore
#else
        public string CompanyState { get; set; }
#endif
        /// <summary>The companyZip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyZip { get; set; }
#nullable restore
#else
        public string CompanyZip { get; set; }
#endif
        /// <summary>The logoAltText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoAltText { get; set; }
#nullable restore
#else
        public string LogoAltText { get; set; }
#endif
        /// <summary>The logoHeight property</summary>
        public int? LogoHeight { get; set; }
        /// <summary>The logoUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoUrl { get; set; }
#nullable restore
#else
        public string LogoUrl { get; set; }
#endif
        /// <summary>The logoWidth property</summary>
        public int? LogoWidth { get; set; }
        /// <summary>The primaryColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryColor { get; set; }
#nullable restore
#else
        public string PrimaryColor { get; set; }
#endif
        /// <summary>The secondaryColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecondaryColor { get; set; }
#nullable restore
#else
        public string SecondaryColor { get; set; }
#endif
        /// <summary>The showMarketingAd property</summary>
        public bool? ShowMarketingAd { get; set; }
        /// <summary>The showSalesAd property</summary>
        public bool? ShowSalesAd { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata"/> and sets the default values.
        /// </summary>
        public ExternalBrandingMetadata()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Scheduler.Meetings.V3.Models.ExternalBrandingMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accent2Color", n => { Accent2Color = n.GetStringValue(); } },
                { "accentColor", n => { AccentColor = n.GetStringValue(); } },
                { "companyAddressLine1", n => { CompanyAddressLine1 = n.GetStringValue(); } },
                { "companyAddressLine2", n => { CompanyAddressLine2 = n.GetStringValue(); } },
                { "companyAvatar", n => { CompanyAvatar = n.GetStringValue(); } },
                { "companyCity", n => { CompanyCity = n.GetStringValue(); } },
                { "companyCountry", n => { CompanyCountry = n.GetStringValue(); } },
                { "companyDomain", n => { CompanyDomain = n.GetStringValue(); } },
                { "companyName", n => { CompanyName = n.GetStringValue(); } },
                { "companyState", n => { CompanyState = n.GetStringValue(); } },
                { "companyZip", n => { CompanyZip = n.GetStringValue(); } },
                { "logoAltText", n => { LogoAltText = n.GetStringValue(); } },
                { "logoHeight", n => { LogoHeight = n.GetIntValue(); } },
                { "logoUrl", n => { LogoUrl = n.GetStringValue(); } },
                { "logoWidth", n => { LogoWidth = n.GetIntValue(); } },
                { "primaryColor", n => { PrimaryColor = n.GetStringValue(); } },
                { "secondaryColor", n => { SecondaryColor = n.GetStringValue(); } },
                { "showMarketingAd", n => { ShowMarketingAd = n.GetBoolValue(); } },
                { "showSalesAd", n => { ShowSalesAd = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accent2Color", Accent2Color);
            writer.WriteStringValue("accentColor", AccentColor);
            writer.WriteStringValue("companyAddressLine1", CompanyAddressLine1);
            writer.WriteStringValue("companyAddressLine2", CompanyAddressLine2);
            writer.WriteStringValue("companyAvatar", CompanyAvatar);
            writer.WriteStringValue("companyCity", CompanyCity);
            writer.WriteStringValue("companyCountry", CompanyCountry);
            writer.WriteStringValue("companyDomain", CompanyDomain);
            writer.WriteStringValue("companyName", CompanyName);
            writer.WriteStringValue("companyState", CompanyState);
            writer.WriteStringValue("companyZip", CompanyZip);
            writer.WriteStringValue("logoAltText", LogoAltText);
            writer.WriteIntValue("logoHeight", LogoHeight);
            writer.WriteStringValue("logoUrl", LogoUrl);
            writer.WriteIntValue("logoWidth", LogoWidth);
            writer.WriteStringValue("primaryColor", PrimaryColor);
            writer.WriteStringValue("secondaryColor", SecondaryColor);
            writer.WriteBoolValue("showMarketingAd", ShowMarketingAd);
            writer.WriteBoolValue("showSalesAd", ShowSalesAd);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
