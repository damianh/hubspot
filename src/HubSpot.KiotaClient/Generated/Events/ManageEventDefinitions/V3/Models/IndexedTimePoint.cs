// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IndexedTimePoint : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The indexReference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference? IndexReference { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference IndexReference { get; set; }
#endif
        /// <summary>The offset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexOffset? Offset { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexOffset Offset { get; set; }
#endif
        /// <summary>The timeType property</summary>
        public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timeType? TimeType { get; set; }
        /// <summary>The timezoneSource property</summary>
        public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timezoneSource? TimezoneSource { get; set; }
        /// <summary>The zoneId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneId { get; set; }
#nullable restore
#else
        public string ZoneId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint"/> and sets the default values.
        /// </summary>
        public IndexedTimePoint()
        {
            AdditionalData = new Dictionary<string, object>();
            TimeType = global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timeType.INDEXED;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "indexReference", n => { IndexReference = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference>(global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference.CreateFromDiscriminatorValue); } },
                { "offset", n => { Offset = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexOffset>(global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexOffset.CreateFromDiscriminatorValue); } },
                { "timeType", n => { TimeType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timeType>(); } },
                { "timezoneSource", n => { TimezoneSource = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timezoneSource>(); } },
                { "zoneId", n => { ZoneId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference>("indexReference", IndexReference);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexOffset>("offset", Offset);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timeType>("timeType", TimeType);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint_timezoneSource>("timezoneSource", TimezoneSource);
            writer.WriteStringValue("zoneId", ZoneId);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalQuarter"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalYear"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.MonthReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.NowReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.QuarterReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.TodayReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.WeekReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.YearReference"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IndexedTimePoint_indexReference : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalQuarter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalQuarter? FiscalQuarter { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalQuarter FiscalQuarter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalYear"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalYear? FiscalYear { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalYear FiscalYear { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.MonthReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.MonthReference? MonthReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.MonthReference MonthReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.NowReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.NowReference? NowReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.NowReference NowReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.QuarterReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.QuarterReference? QuarterReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.QuarterReference QuarterReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.TodayReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.TodayReference? TodayReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.TodayReference TodayReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.WeekReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.WeekReference? WeekReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.WeekReference WeekReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.YearReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.YearReference? YearReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.YearReference YearReference { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.IndexedTimePoint.IndexedTimePoint_indexReference();
                if("FiscalQuarter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.FiscalQuarter = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalQuarter();
                }
                else if("FiscalYear".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.FiscalYear = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalYear();
                }
                else if("MonthReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.MonthReference = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.MonthReference();
                }
                else if("NowReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.NowReference = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.NowReference();
                }
                else if("QuarterReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.QuarterReference = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.QuarterReference();
                }
                else if("TodayReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.TodayReference = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.TodayReference();
                }
                else if("WeekReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.WeekReference = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.WeekReference();
                }
                else if("YearReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.YearReference = new global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.YearReference();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(FiscalQuarter != null)
                {
                    return FiscalQuarter.GetFieldDeserializers();
                }
                else if(FiscalYear != null)
                {
                    return FiscalYear.GetFieldDeserializers();
                }
                else if(MonthReference != null)
                {
                    return MonthReference.GetFieldDeserializers();
                }
                else if(NowReference != null)
                {
                    return NowReference.GetFieldDeserializers();
                }
                else if(QuarterReference != null)
                {
                    return QuarterReference.GetFieldDeserializers();
                }
                else if(TodayReference != null)
                {
                    return TodayReference.GetFieldDeserializers();
                }
                else if(WeekReference != null)
                {
                    return WeekReference.GetFieldDeserializers();
                }
                else if(YearReference != null)
                {
                    return YearReference.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(FiscalQuarter != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalQuarter>(null, FiscalQuarter);
                }
                else if(FiscalYear != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.FiscalYear>(null, FiscalYear);
                }
                else if(MonthReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.MonthReference>(null, MonthReference);
                }
                else if(NowReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.NowReference>(null, NowReference);
                }
                else if(QuarterReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.QuarterReference>(null, QuarterReference);
                }
                else if(TodayReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.TodayReference>(null, TodayReference);
                }
                else if(WeekReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.WeekReference>(null, WeekReference);
                }
                else if(YearReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Events.ManageEventDefinitions.V3.Models.YearReference>(null, YearReference);
                }
            }
        }
    }
}
#pragma warning restore CS0618
