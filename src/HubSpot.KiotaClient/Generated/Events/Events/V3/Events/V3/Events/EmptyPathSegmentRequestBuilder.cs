// <auto-generated/>
#pragma warning disable CS0618
using DamianH.HubSpot.KiotaClient.Events.Events.V3.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events
{
    /// <summary>
    /// Builds and executes requests for operations under \events\v3\events\
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EmptyPathSegmentRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmptyPathSegmentRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/events/v3/events/{?after*,before*,eventType*,id*,limit*,objectId*,objectProperty%2E%7Bpropname*,objectType*,occurredAfter*,occurredBefore*,property%2E%7Bpropname*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmptyPathSegmentRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/events/v3/events/{?after*,before*,eventType*,id*,limit*,objectId*,objectProperty%2E%7Bpropname*,objectType*,occurredAfter*,occurredBefore*,property%2E%7Bpropname*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve instances of event completion data. For example, retrieve all event completions associated with a specific contact.
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Models.CollectionResponseExternalUnifiedEvent"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Models.CollectionResponseExternalUnifiedEvent?> GetAsync(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder.EmptyPathSegmentRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Models.CollectionResponseExternalUnifiedEvent> GetAsync(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder.EmptyPathSegmentRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Models.CollectionResponseExternalUnifiedEvent>(requestInfo, global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Models.CollectionResponseExternalUnifiedEvent.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve instances of event completion data. For example, retrieve all event completions associated with a specific contact.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder.EmptyPathSegmentRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder.EmptyPathSegmentRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder WithUrl(string rawUrl)
        {
            return new global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve instances of event completion data. For example, retrieve all event completions associated with a specific contact.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EmptyPathSegmentRequestBuilderGetQueryParameters 
        {
            /// <summary>The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("after")]
            public string? After { get; set; }
#nullable restore
#else
            [QueryParameter("after")]
            public string After { get; set; }
#endif
            /// <summary>Pagination cursor for backward navigation. Retrieves events occurring before the specified cursor position. Note: Currently only forward pagination with after is supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("before")]
            public string? Before { get; set; }
#nullable restore
#else
            [QueryParameter("before")]
            public string Before { get; set; }
#endif
            /// <summary>The event type name. You can retrieve available event types using the [event types endpoint](#get-%2Fevents%2Fv3%2Fevents%2Fevent-types).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("eventType")]
            public string? EventType { get; set; }
#nullable restore
#else
            [QueryParameter("eventType")]
            public string EventType { get; set; }
#endif
            /// <summary>ID of an event instance. IDs are 1:1 with event instances. If you provide this filter and additional filters, the other filters must match the values on the event instance to yield results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("id")]
            public string[]? Id { get; set; }
#nullable restore
#else
            [QueryParameter("id")]
            public string[] Id { get; set; }
#endif
            /// <summary>The maximum number of results to display per page.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The ID of the CRM Object to filter event instances on. When including this parameter, you must also include the `objectType` parameter.</summary>
            [QueryParameter("objectId")]
            public long? ObjectId { get; set; }
            /// <summary>Instead of retrieving event data for a specific object by its ID, you can specify a unique identifier property. For contacts, you can use the `email` property. (e.g., `objectProperty.email=name@domain.com`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("objectProperty%2E%7Bpropname")]
            public string? ObjectPropertypropname { get; set; }
#nullable restore
#else
            [QueryParameter("objectProperty%2E%7Bpropname")]
            public string ObjectPropertypropname { get; set; }
#endif
            /// <summary>The type of CRM object to filter event instances on (e.g., `contact`). To retrieve event data for a specific CRM record, include the additional `objectId` query parameter (below). </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("objectType")]
            public string? ObjectType { get; set; }
#nullable restore
#else
            [QueryParameter("objectType")]
            public string ObjectType { get; set; }
#endif
            /// <summary>Filter for event data that occurred after a specific datetime.</summary>
            [QueryParameter("occurredAfter")]
            public DateTimeOffset? OccurredAfter { get; set; }
            /// <summary>Filter for event data that occurred before a specific datetime.</summary>
            [QueryParameter("occurredBefore")]
            public DateTimeOffset? OccurredBefore { get; set; }
            /// <summary>Filter for event completions that contain a specific value for an event property (e.g., `property.hs_city=portland`). For properties values with spaces, replaces spaces with `%20` or `+` (e.g., `property.hs_city=new+york`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("property%2E%7Bpropname")]
            public string? Propertypropname { get; set; }
#nullable restore
#else
            [QueryParameter("property%2E%7Bpropname")]
            public string Propertypropname { get; set; }
#endif
            /// <summary>Sort direction based on the timestamp of the event instance, `ASCENDING` or `DESCENDING`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string[]? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string[] Sort { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EmptyPathSegmentRequestBuilderGetRequestConfiguration : RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Events.Events.V3.Events.V3.Events.EmptyPathSegmentRequestBuilder.EmptyPathSegmentRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
