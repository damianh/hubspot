// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PortalInformationResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accountType property</summary>
        public global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse_accountType? AccountType { get; set; }
        /// <summary>The additionalCurrencies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AdditionalCurrencies { get; set; }
#nullable restore
#else
        public List<string> AdditionalCurrencies { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The companyCurrency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyCurrency { get; set; }
#nullable restore
#else
        public string CompanyCurrency { get; set; }
#endif
        /// <summary>The dataHostingLocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataHostingLocation { get; set; }
#nullable restore
#else
        public string DataHostingLocation { get; set; }
#endif
        /// <summary>The portalId property</summary>
        public int? PortalId { get; set; }
        /// <summary>The timeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The uiDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UiDomain { get; set; }
#nullable restore
#else
        public string UiDomain { get; set; }
#endif
        /// <summary>The utcOffset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UtcOffset { get; set; }
#nullable restore
#else
        public string UtcOffset { get; set; }
#endif
        /// <summary>The utcOffsetMilliseconds property</summary>
        public long? UtcOffsetMilliseconds { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse"/> and sets the default values.
        /// </summary>
        public PortalInformationResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountType", n => { AccountType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse_accountType>(); } },
                { "additionalCurrencies", n => { AdditionalCurrencies = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "companyCurrency", n => { CompanyCurrency = n.GetStringValue(); } },
                { "dataHostingLocation", n => { DataHostingLocation = n.GetStringValue(); } },
                { "portalId", n => { PortalId = n.GetIntValue(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "uiDomain", n => { UiDomain = n.GetStringValue(); } },
                { "utcOffset", n => { UtcOffset = n.GetStringValue(); } },
                { "utcOffsetMilliseconds", n => { UtcOffsetMilliseconds = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.PortalInformationResponse_accountType>("accountType", AccountType);
            writer.WriteCollectionOfPrimitiveValues<string>("additionalCurrencies", AdditionalCurrencies);
            writer.WriteStringValue("companyCurrency", CompanyCurrency);
            writer.WriteStringValue("dataHostingLocation", DataHostingLocation);
            writer.WriteIntValue("portalId", PortalId);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteStringValue("uiDomain", UiDomain);
            writer.WriteStringValue("utcOffset", UtcOffset);
            writer.WriteLongValue("utcOffsetMilliseconds", UtcOffsetMilliseconds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
