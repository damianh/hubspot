// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models
{
    /// <summary>
    /// API usage and limits information for a HubSpot account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiUsage : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates when the cache was last updated.</summary>
        public DateTimeOffset? CollectedAt { get; set; }
        /// <summary>How many API calls an account has made for the current day.</summary>
        public int? CurrentUsage { get; set; }
        /// <summary>Status of fetching the information, including if the data came from the cache.</summary>
        public global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage_fetchStatus? FetchStatus { get; set; }
        /// <summary>Name of the limit type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Time that the limit will reset.</summary>
        public DateTimeOffset? ResetsAt { get; set; }
        /// <summary>Limits by which a single integration can consume the HubSpot public APIs.</summary>
        public int? UsageLimit { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage"/> and sets the default values.
        /// </summary>
        public ApiUsage()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "collectedAt", n => { CollectedAt = n.GetDateTimeOffsetValue(); } },
                { "currentUsage", n => { CurrentUsage = n.GetIntValue(); } },
                { "fetchStatus", n => { FetchStatus = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage_fetchStatus>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "resetsAt", n => { ResetsAt = n.GetDateTimeOffsetValue(); } },
                { "usageLimit", n => { UsageLimit = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("collectedAt", CollectedAt);
            writer.WriteIntValue("currentUsage", CurrentUsage);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Account.AccountInfo.V3.Models.ApiUsage_fetchStatus>("fetchStatus", FetchStatus);
            writer.WriteStringValue("name", Name);
            writer.WriteDateTimeOffsetValue("resetsAt", ResetsAt);
            writer.WriteIntValue("usageLimit", UsageLimit);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
