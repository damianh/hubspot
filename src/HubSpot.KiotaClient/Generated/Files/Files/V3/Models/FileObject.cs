// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Files.Files.V3.Models
{
    /// <summary>
    /// File
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FileObject : IAdditionalDataHolder, IParsable
    {
        /// <summary>File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.</summary>
        public global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.File_access? Access { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If the file is deleted.</summary>
        public bool? Archived { get; set; }
        /// <summary>Deletion time of the file object.</summary>
        public DateTimeOffset? ArchivedAt { get; set; }
        /// <summary>Creation time of the file object.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Default hosting URL of the file. This will use one of HubSpot&apos;s provided URLs to serve the file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultHostingUrl { get; set; }
#nullable restore
#else
        public string DefaultHostingUrl { get; set; }
#endif
        /// <summary>Encoding of the file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Encoding { get; set; }
#nullable restore
#else
        public string Encoding { get; set; }
#endif
        /// <summary>The expiresAt property</summary>
        public long? ExpiresAt { get; set; }
        /// <summary>Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Extension { get; set; }
#nullable restore
#else
        public string Extension { get; set; }
#endif
        /// <summary>The MD5 hash of the file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileMd5 { get; set; }
#nullable restore
#else
        public string FileMd5 { get; set; }
#endif
        /// <summary>For image and video files, the height of the content.</summary>
        public int? Height { get; set; }
        /// <summary>File ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Previously &quot;archied&quot;. Indicates if the file should be used when creating new content like web pages.</summary>
        public bool? IsUsableInContent { get; set; }
        /// <summary>Name of the file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>ID of the folder the file is in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentFolderId { get; set; }
#nullable restore
#else
        public string ParentFolderId { get; set; }
#endif
        /// <summary>Path of the file in the file manager.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>Size of the file in bytes.</summary>
        public long? Size { get; set; }
        /// <summary>The sourceGroup property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceGroup { get; set; }
#nullable restore
#else
        public string SourceGroup { get; set; }
#endif
        /// <summary>Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>Timestamp of the latest update to the file.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>For image and video files, the width of the content.</summary>
        public int? Width { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileObject"/> and sets the default values.
        /// </summary>
        public FileObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access", n => { Access = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.File_access>(); } },
                { "archived", n => { Archived = n.GetBoolValue(); } },
                { "archivedAt", n => { ArchivedAt = n.GetDateTimeOffsetValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "defaultHostingUrl", n => { DefaultHostingUrl = n.GetStringValue(); } },
                { "encoding", n => { Encoding = n.GetStringValue(); } },
                { "expiresAt", n => { ExpiresAt = n.GetLongValue(); } },
                { "extension", n => { Extension = n.GetStringValue(); } },
                { "fileMd5", n => { FileMd5 = n.GetStringValue(); } },
                { "height", n => { Height = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isUsableInContent", n => { IsUsableInContent = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "parentFolderId", n => { ParentFolderId = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "size", n => { Size = n.GetLongValue(); } },
                { "sourceGroup", n => { SourceGroup = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "width", n => { Width = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.File_access>("access", Access);
            writer.WriteBoolValue("archived", Archived);
            writer.WriteDateTimeOffsetValue("archivedAt", ArchivedAt);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("defaultHostingUrl", DefaultHostingUrl);
            writer.WriteStringValue("encoding", Encoding);
            writer.WriteLongValue("expiresAt", ExpiresAt);
            writer.WriteStringValue("extension", Extension);
            writer.WriteStringValue("fileMd5", FileMd5);
            writer.WriteIntValue("height", Height);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isUsableInContent", IsUsableInContent);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("parentFolderId", ParentFolderId);
            writer.WriteStringValue("path", Path);
            writer.WriteLongValue("size", Size);
            writer.WriteStringValue("sourceGroup", SourceGroup);
            writer.WriteStringValue("type", Type);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteStringValue("url", Url);
            writer.WriteIntValue("width", Width);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
