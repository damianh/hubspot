// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Files.Files.V3.Models
{
    /// <summary>
    /// Object for updating files.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FileUpdateInput : IAdditionalDataHolder, IParsable
    {
        /// <summary>NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.</summary>
        public global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput_access? Access { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The clearExpires property</summary>
        public bool? ClearExpires { get; set; }
        /// <summary>The expiresAt property</summary>
        public DateTimeOffset? ExpiresAt { get; set; }
        /// <summary>Mark whether the file should be used in new content or not.</summary>
        public bool? IsUsableInContent { get; set; }
        /// <summary>New name for the file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentFolderId { get; set; }
#nullable restore
#else
        public string ParentFolderId { get; set; }
#endif
        /// <summary>Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentFolderPath { get; set; }
#nullable restore
#else
        public string ParentFolderPath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput"/> and sets the default values.
        /// </summary>
        public FileUpdateInput()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access", n => { Access = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput_access>(); } },
                { "clearExpires", n => { ClearExpires = n.GetBoolValue(); } },
                { "expiresAt", n => { ExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "isUsableInContent", n => { IsUsableInContent = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "parentFolderId", n => { ParentFolderId = n.GetStringValue(); } },
                { "parentFolderPath", n => { ParentFolderPath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Files.Files.V3.Models.FileUpdateInput_access>("access", Access);
            writer.WriteBoolValue("clearExpires", ClearExpires);
            writer.WriteDateTimeOffsetValue("expiresAt", ExpiresAt);
            writer.WriteBoolValue("isUsableInContent", IsUsableInContent);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("parentFolderId", ParentFolderId);
            writer.WriteStringValue("parentFolderPath", ParentFolderPath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
