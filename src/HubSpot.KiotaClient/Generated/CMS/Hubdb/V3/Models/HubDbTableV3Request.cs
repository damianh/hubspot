// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HubDbTableV3Request : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies whether child tables can be created</summary>
        public bool? AllowChildTables { get; set; }
        /// <summary>Specifies whether the table can be read by public without authorization</summary>
        public bool? AllowPublicApiAccess { get; set; }
        /// <summary>List of columns in the table</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.ColumnRequest>? Columns { get; set; }
#nullable restore
#else
        public List<global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.ColumnRequest> Columns { get; set; }
#endif
        /// <summary>Specifies the key value pairs of the [metadata fields](https://developers.hubspot.com/docs/cms/guides/dynamic-pages/hubdb#dynamic-pages) with the associated column IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request_dynamicMetaTags? DynamicMetaTags { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request_dynamicMetaTags DynamicMetaTags { get; set; }
#endif
        /// <summary>Specifies creation of multi-level dynamic pages using child tables</summary>
        public bool? EnableChildTablePages { get; set; }
        /// <summary>Label of the table</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>Name of the table</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Specifies whether the table can be used for creation of dynamic pages</summary>
        public bool? UseForPages { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request"/> and sets the default values.
        /// </summary>
        public HubDbTableV3Request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowChildTables", n => { AllowChildTables = n.GetBoolValue(); } },
                { "allowPublicApiAccess", n => { AllowPublicApiAccess = n.GetBoolValue(); } },
                { "columns", n => { Columns = n.GetCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.ColumnRequest>(global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.ColumnRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "dynamicMetaTags", n => { DynamicMetaTags = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request_dynamicMetaTags>(global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request_dynamicMetaTags.CreateFromDiscriminatorValue); } },
                { "enableChildTablePages", n => { EnableChildTablePages = n.GetBoolValue(); } },
                { "label", n => { Label = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "useForPages", n => { UseForPages = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowChildTables", AllowChildTables);
            writer.WriteBoolValue("allowPublicApiAccess", AllowPublicApiAccess);
            writer.WriteCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.ColumnRequest>("columns", Columns);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CMS.Hubdb.V3.Models.HubDbTableV3Request_dynamicMetaTags>("dynamicMetaTags", DynamicMetaTags);
            writer.WriteBoolValue("enableChildTablePages", EnableChildTablePages);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("useForPages", UseForPages);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
