// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AttentionSpanEvent : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the contact in HubSpot’s system that consumed the media. This can be fetched using HubSpot&apos;s Get contact by usertoken (utk) API. The API also supports supplying a usertoken, and will handle converting this into a contact ID automatically.</summary>
        public long? ContactId { get; set; }
        /// <summary>The mediaBridgeId property</summary>
        public long? MediaBridgeId { get; set; }
        /// <summary>The mediaBridgeObjectCoordinates property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaBridgeObjectCoordinates { get; set; }
#nullable restore
#else
        public string MediaBridgeObjectCoordinates { get; set; }
#endif
        /// <summary>The mediaBridgeObjectTypeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaBridgeObjectTypeId { get; set; }
#nullable restore
#else
        public string MediaBridgeObjectTypeId { get; set; }
#endif
        /// <summary>The mediaName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaName { get; set; }
#nullable restore
#else
        public string MediaName { get; set; }
#endif
        /// <summary>The mediaType property</summary>
        public global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent_mediaType? MediaType { get; set; }
        /// <summary>The mediaUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaUrl { get; set; }
#nullable restore
#else
        public string MediaUrl { get; set; }
#endif
        /// <summary>The timestamp at which this event occurred, in milliseconds since the epoch.</summary>
        public long? OccurredTimestamp { get; set; }
        /// <summary>The ID of the page, if hosted on HubSpot. Required for HubSpot pages.</summary>
        public long? PageId { get; set; }
        /// <summary>The name of the page. Required if the page is not hosted on HubSpot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PageName { get; set; }
#nullable restore
#else
        public string PageName { get; set; }
#endif
        /// <summary>The pageObjectCoordinates property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PageObjectCoordinates { get; set; }
#nullable restore
#else
        public string PageObjectCoordinates { get; set; }
#endif
        /// <summary>The URL of the page that an event happened on. Required if the page is not hosted on HubSpot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PageUrl { get; set; }
#nullable restore
#else
        public string PageUrl { get; set; }
#endif
        /// <summary>The percentRange property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PercentRange { get; set; }
#nullable restore
#else
        public string PercentRange { get; set; }
#endif
        /// <summary>The ID of the HubSpot account.</summary>
        public int? PortalId { get; set; }
        /// <summary>The providerId property</summary>
        public int? ProviderId { get; set; }
        /// <summary>This is the raw data which provides the most granular data about spans of the media, and how many times each span was consumed by the user. For example, for a 10 second video where each second is a span, if a visitor watches the first 5 seconds of the video, then restarts the video and watches the first 2 seconds again, the resulting `rawDataString` would be `“0=2;1=2;2=1;3=1;4=1;5=0;6=0;7=0;8=0;9=0;”`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RawData { get; set; }
#nullable restore
#else
        public string RawData { get; set; }
#endif
        /// <summary>The sessionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SessionId { get; set; }
#nullable restore
#else
        public string SessionId { get; set; }
#endif
        /// <summary>The percent of the media that the user consumed. Providers may calculate this differently depending on how they consider repeated views of the same portion of media. For this reason, the API will not attempt to validate totalPercentWatched against the attention span information for the event. If it is missing, HubSpot will calculate this from the attention span map as follows: (number of spans with a value of 1 or more)/(Total number of spans).</summary>
        public double? TotalPercentPlayed { get; set; }
        /// <summary>The seconds that a user spent consuming the media. The media bridge calculates this as `totalPercentPlayed`*`mediaDuration`. If a provider would like this to be calculated differently, they can provide the pre-calculated value when they create the event.</summary>
        public int? TotalSecondsPlayed { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent"/> and sets the default values.
        /// </summary>
        public AttentionSpanEvent()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "contactId", n => { ContactId = n.GetLongValue(); } },
                { "mediaBridgeId", n => { MediaBridgeId = n.GetLongValue(); } },
                { "mediaBridgeObjectCoordinates", n => { MediaBridgeObjectCoordinates = n.GetStringValue(); } },
                { "mediaBridgeObjectTypeId", n => { MediaBridgeObjectTypeId = n.GetStringValue(); } },
                { "mediaName", n => { MediaName = n.GetStringValue(); } },
                { "mediaType", n => { MediaType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent_mediaType>(); } },
                { "mediaUrl", n => { MediaUrl = n.GetStringValue(); } },
                { "occurredTimestamp", n => { OccurredTimestamp = n.GetLongValue(); } },
                { "pageId", n => { PageId = n.GetLongValue(); } },
                { "pageName", n => { PageName = n.GetStringValue(); } },
                { "pageObjectCoordinates", n => { PageObjectCoordinates = n.GetStringValue(); } },
                { "pageUrl", n => { PageUrl = n.GetStringValue(); } },
                { "percentRange", n => { PercentRange = n.GetStringValue(); } },
                { "portalId", n => { PortalId = n.GetIntValue(); } },
                { "providerId", n => { ProviderId = n.GetIntValue(); } },
                { "rawData", n => { RawData = n.GetStringValue(); } },
                { "sessionId", n => { SessionId = n.GetStringValue(); } },
                { "totalPercentPlayed", n => { TotalPercentPlayed = n.GetDoubleValue(); } },
                { "totalSecondsPlayed", n => { TotalSecondsPlayed = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("contactId", ContactId);
            writer.WriteLongValue("mediaBridgeId", MediaBridgeId);
            writer.WriteStringValue("mediaBridgeObjectCoordinates", MediaBridgeObjectCoordinates);
            writer.WriteStringValue("mediaBridgeObjectTypeId", MediaBridgeObjectTypeId);
            writer.WriteStringValue("mediaName", MediaName);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.CMS.MediaBridge.V1.Models.AttentionSpanEvent_mediaType>("mediaType", MediaType);
            writer.WriteStringValue("mediaUrl", MediaUrl);
            writer.WriteLongValue("occurredTimestamp", OccurredTimestamp);
            writer.WriteLongValue("pageId", PageId);
            writer.WriteStringValue("pageName", PageName);
            writer.WriteStringValue("pageObjectCoordinates", PageObjectCoordinates);
            writer.WriteStringValue("pageUrl", PageUrl);
            writer.WriteStringValue("percentRange", PercentRange);
            writer.WriteIntValue("portalId", PortalId);
            writer.WriteIntValue("providerId", ProviderId);
            writer.WriteStringValue("rawData", RawData);
            writer.WriteStringValue("sessionId", SessionId);
            writer.WriteDoubleValue("totalPercentPlayed", TotalPercentPlayed);
            writer.WriteIntValue("totalSecondsPlayed", TotalSecondsPlayed);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
