// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicAuditLog : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The type of event that took place (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED).</summary>
        public global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_event? Event { get; set; }
        /// <summary>The name of the user who caused the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>The meta property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_meta? Meta { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_meta Meta { get; set; }
#endif
        /// <summary>The ID of the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectId { get; set; }
#nullable restore
#else
        public string ObjectId { get; set; }
#endif
        /// <summary>The internal name of the object in HubSpot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; set; }
#nullable restore
#else
        public string ObjectName { get; set; }
#endif
        /// <summary>The type of the object (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.)</summary>
        public global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_objectType? ObjectType { get; set; }
        /// <summary>The timestamp at which the event occurred.</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>The ID of the user who caused the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog"/> and sets the default values.
        /// </summary>
        public PublicAuditLog()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "event", n => { Event = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_event>(); } },
                { "fullName", n => { FullName = n.GetStringValue(); } },
                { "meta", n => { Meta = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_meta>(global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_meta.CreateFromDiscriminatorValue); } },
                { "objectId", n => { ObjectId = n.GetStringValue(); } },
                { "objectName", n => { ObjectName = n.GetStringValue(); } },
                { "objectType", n => { ObjectType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_objectType>(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_event>("event", Event);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_meta>("meta", Meta);
            writer.WriteStringValue("objectId", ObjectId);
            writer.WriteStringValue("objectName", ObjectName);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.CMS.CmsContentAudit.V3.Models.PublicAuditLog_objectType>("objectType", ObjectType);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteStringValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
