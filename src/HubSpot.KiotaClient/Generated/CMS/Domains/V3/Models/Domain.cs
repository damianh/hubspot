// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CMS.Domains.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Domain : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The correctCname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CorrectCname { get; set; }
#nullable restore
#else
        public string CorrectCname { get; set; }
#endif
        /// <summary>The created property</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The actual domain or sub-domain. e.g. www.hubspot.com</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DomainProp { get; set; }
#nullable restore
#else
        public string DomainProp { get; set; }
#endif
        /// <summary>The unique ID of this domain.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the DNS for this domain is optimally configured for use with HubSpot.</summary>
        public bool? IsResolving { get; set; }
        /// <summary>The isSslEnabled property</summary>
        public bool? IsSslEnabled { get; set; }
        /// <summary>The isSslOnly property</summary>
        public bool? IsSslOnly { get; set; }
        /// <summary>Whether the domain is used for CMS blog posts.</summary>
        public bool? IsUsedForBlogPost { get; set; }
        /// <summary>Whether the domain is used for CMS email web pages.</summary>
        public bool? IsUsedForEmail { get; set; }
        /// <summary>Whether the domain is used for CMS knowledge pages.</summary>
        public bool? IsUsedForKnowledge { get; set; }
        /// <summary>Whether the domain is used for CMS landing pages.</summary>
        public bool? IsUsedForLandingPage { get; set; }
        /// <summary>Whether the domain is used for CMS site pages.</summary>
        public bool? IsUsedForSitePage { get; set; }
        /// <summary>The manuallyMarkedAsResolving property</summary>
        public bool? ManuallyMarkedAsResolving { get; set; }
        /// <summary>The primaryBlogPost property</summary>
        public bool? PrimaryBlogPost { get; set; }
        /// <summary>The primaryEmail property</summary>
        public bool? PrimaryEmail { get; set; }
        /// <summary>The primaryKnowledge property</summary>
        public bool? PrimaryKnowledge { get; set; }
        /// <summary>The primaryLandingPage property</summary>
        public bool? PrimaryLandingPage { get; set; }
        /// <summary>The primarySitePage property</summary>
        public bool? PrimarySitePage { get; set; }
        /// <summary>The secondaryToDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecondaryToDomain { get; set; }
#nullable restore
#else
        public string SecondaryToDomain { get; set; }
#endif
        /// <summary>The updated property</summary>
        public DateTimeOffset? Updated { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CMS.Domains.V3.Models.Domain"/> and sets the default values.
        /// </summary>
        public Domain()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CMS.Domains.V3.Models.Domain"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CMS.Domains.V3.Models.Domain CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CMS.Domains.V3.Models.Domain();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "correctCname", n => { CorrectCname = n.GetStringValue(); } },
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "domain", n => { DomainProp = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isResolving", n => { IsResolving = n.GetBoolValue(); } },
                { "isSslEnabled", n => { IsSslEnabled = n.GetBoolValue(); } },
                { "isSslOnly", n => { IsSslOnly = n.GetBoolValue(); } },
                { "isUsedForBlogPost", n => { IsUsedForBlogPost = n.GetBoolValue(); } },
                { "isUsedForEmail", n => { IsUsedForEmail = n.GetBoolValue(); } },
                { "isUsedForKnowledge", n => { IsUsedForKnowledge = n.GetBoolValue(); } },
                { "isUsedForLandingPage", n => { IsUsedForLandingPage = n.GetBoolValue(); } },
                { "isUsedForSitePage", n => { IsUsedForSitePage = n.GetBoolValue(); } },
                { "manuallyMarkedAsResolving", n => { ManuallyMarkedAsResolving = n.GetBoolValue(); } },
                { "primaryBlogPost", n => { PrimaryBlogPost = n.GetBoolValue(); } },
                { "primaryEmail", n => { PrimaryEmail = n.GetBoolValue(); } },
                { "primaryKnowledge", n => { PrimaryKnowledge = n.GetBoolValue(); } },
                { "primaryLandingPage", n => { PrimaryLandingPage = n.GetBoolValue(); } },
                { "primarySitePage", n => { PrimarySitePage = n.GetBoolValue(); } },
                { "secondaryToDomain", n => { SecondaryToDomain = n.GetStringValue(); } },
                { "updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("correctCname", CorrectCname);
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteStringValue("domain", DomainProp);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isResolving", IsResolving);
            writer.WriteBoolValue("isSslEnabled", IsSslEnabled);
            writer.WriteBoolValue("isSslOnly", IsSslOnly);
            writer.WriteBoolValue("isUsedForBlogPost", IsUsedForBlogPost);
            writer.WriteBoolValue("isUsedForEmail", IsUsedForEmail);
            writer.WriteBoolValue("isUsedForKnowledge", IsUsedForKnowledge);
            writer.WriteBoolValue("isUsedForLandingPage", IsUsedForLandingPage);
            writer.WriteBoolValue("isUsedForSitePage", IsUsedForSitePage);
            writer.WriteBoolValue("manuallyMarkedAsResolving", ManuallyMarkedAsResolving);
            writer.WriteBoolValue("primaryBlogPost", PrimaryBlogPost);
            writer.WriteBoolValue("primaryEmail", PrimaryEmail);
            writer.WriteBoolValue("primaryKnowledge", PrimaryKnowledge);
            writer.WriteBoolValue("primaryLandingPage", PrimaryLandingPage);
            writer.WriteBoolValue("primarySitePage", PrimarySitePage);
            writer.WriteStringValue("secondaryToDomain", SecondaryToDomain);
            writer.WriteDateTimeOffsetValue("updated", Updated);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
