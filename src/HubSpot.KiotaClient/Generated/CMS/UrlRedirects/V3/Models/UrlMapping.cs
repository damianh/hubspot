// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CMS.UrlRedirects.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UrlMapping : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The created property</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The destination URL, where the target URL should be redirected if it matches the `routePrefix`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Destination { get; set; }
#nullable restore
#else
        public string Destination { get; set; }
#endif
        /// <summary>The unique ID of this URL redirect.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the `routePrefix` should match on the entire URL, including the domain.</summary>
        public bool? IsMatchFullUrl { get; set; }
        /// <summary>Whether the `routePrefix` should match on the entire URL path, including the query string.</summary>
        public bool? IsMatchQueryString { get; set; }
        /// <summary>Whether the URL redirect mapping should apply only if a live page on the URL isn&apos;t found. If False, the URL redirect mapping will take precedence over any existing page.</summary>
        public bool? IsOnlyAfterNotFound { get; set; }
        /// <summary>Whether the `routePrefix` should match based on pattern.</summary>
        public bool? IsPattern { get; set; }
        /// <summary>Whether the `routePrefix` should match both HTTP and HTTPS protocols.</summary>
        public bool? IsProtocolAgnostic { get; set; }
        /// <summary>Whether a trailing slash will be ignored.</summary>
        public bool? IsTrailingSlashOptional { get; set; }
        /// <summary>Used to prioritize URL redirection. If a given URL matches more than one redirect, the one with the **lower** precedence will be used.</summary>
        public int? Precedence { get; set; }
        /// <summary>The type of redirect to create. Options include: 301 (permanent), 302 (temporary), or 305 (proxy). Find more details [here](https://knowledge.hubspot.com/cos-general/how-to-redirect-a-hubspot-page).</summary>
        public int? RedirectStyle { get; set; }
        /// <summary>The target incoming URL, path, or pattern to match for redirection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoutePrefix { get; set; }
#nullable restore
#else
        public string RoutePrefix { get; set; }
#endif
        /// <summary>The updated property</summary>
        public DateTimeOffset? Updated { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CMS.UrlRedirects.V3.Models.UrlMapping"/> and sets the default values.
        /// </summary>
        public UrlMapping()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CMS.UrlRedirects.V3.Models.UrlMapping"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CMS.UrlRedirects.V3.Models.UrlMapping CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CMS.UrlRedirects.V3.Models.UrlMapping();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "destination", n => { Destination = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isMatchFullUrl", n => { IsMatchFullUrl = n.GetBoolValue(); } },
                { "isMatchQueryString", n => { IsMatchQueryString = n.GetBoolValue(); } },
                { "isOnlyAfterNotFound", n => { IsOnlyAfterNotFound = n.GetBoolValue(); } },
                { "isPattern", n => { IsPattern = n.GetBoolValue(); } },
                { "isProtocolAgnostic", n => { IsProtocolAgnostic = n.GetBoolValue(); } },
                { "isTrailingSlashOptional", n => { IsTrailingSlashOptional = n.GetBoolValue(); } },
                { "precedence", n => { Precedence = n.GetIntValue(); } },
                { "redirectStyle", n => { RedirectStyle = n.GetIntValue(); } },
                { "routePrefix", n => { RoutePrefix = n.GetStringValue(); } },
                { "updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteStringValue("destination", Destination);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isMatchFullUrl", IsMatchFullUrl);
            writer.WriteBoolValue("isMatchQueryString", IsMatchQueryString);
            writer.WriteBoolValue("isOnlyAfterNotFound", IsOnlyAfterNotFound);
            writer.WriteBoolValue("isPattern", IsPattern);
            writer.WriteBoolValue("isProtocolAgnostic", IsProtocolAgnostic);
            writer.WriteBoolValue("isTrailingSlashOptional", IsTrailingSlashOptional);
            writer.WriteIntValue("precedence", Precedence);
            writer.WriteIntValue("redirectStyle", RedirectStyle);
            writer.WriteStringValue("routePrefix", RoutePrefix);
            writer.WriteDateTimeOffsetValue("updated", Updated);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
