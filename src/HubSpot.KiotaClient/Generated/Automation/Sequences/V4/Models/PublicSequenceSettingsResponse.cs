// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Automation.Sequences.V4.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicSequenceSettingsResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAt property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The eligibleFollowUpDays property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EligibleFollowUpDays { get; set; }
#nullable restore
#else
        public string EligibleFollowUpDays { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The individualTaskRemindersEnabled property</summary>
        public bool? IndividualTaskRemindersEnabled { get; set; }
        /// <summary>The sellingStrategy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SellingStrategy { get; set; }
#nullable restore
#else
        public string SellingStrategy { get; set; }
#endif
        /// <summary>The sendWindowEndMinute property</summary>
        public int? SendWindowEndMinute { get; set; }
        /// <summary>The sendWindowStartMinute property</summary>
        public int? SendWindowStartMinute { get; set; }
        /// <summary>The taskReminderMinute property</summary>
        public int? TaskReminderMinute { get; set; }
        /// <summary>The updatedAt property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Automation.Sequences.V4.Models.PublicSequenceSettingsResponse"/> and sets the default values.
        /// </summary>
        public PublicSequenceSettingsResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Automation.Sequences.V4.Models.PublicSequenceSettingsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Automation.Sequences.V4.Models.PublicSequenceSettingsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Automation.Sequences.V4.Models.PublicSequenceSettingsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "eligibleFollowUpDays", n => { EligibleFollowUpDays = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "individualTaskRemindersEnabled", n => { IndividualTaskRemindersEnabled = n.GetBoolValue(); } },
                { "sellingStrategy", n => { SellingStrategy = n.GetStringValue(); } },
                { "sendWindowEndMinute", n => { SendWindowEndMinute = n.GetIntValue(); } },
                { "sendWindowStartMinute", n => { SendWindowStartMinute = n.GetIntValue(); } },
                { "taskReminderMinute", n => { TaskReminderMinute = n.GetIntValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("eligibleFollowUpDays", EligibleFollowUpDays);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("individualTaskRemindersEnabled", IndividualTaskRemindersEnabled);
            writer.WriteStringValue("sellingStrategy", SellingStrategy);
            writer.WriteIntValue("sendWindowEndMinute", SendWindowEndMinute);
            writer.WriteIntValue("sendWindowStartMinute", SendWindowStartMinute);
            writer.WriteIntValue("taskReminderMinute", TaskReminderMinute);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
