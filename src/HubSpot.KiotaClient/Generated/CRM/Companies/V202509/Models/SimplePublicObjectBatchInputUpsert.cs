// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models
{
    /// <summary>
    /// Represents an object used in batch upsert operations, containing an objectâ€™s unique identifier, its properties, and optionally the unique property name and a write trace ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SimplePublicObjectBatchInputUpsert : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the company to update.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name of a property whose values are unique for this object</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdProperty { get; set; }
#nullable restore
#else
        public string IdProperty { get; set; }
#endif
        /// <summary>In each input object, set this field to a unique ID value to enable more granular debugging for error responses. Learn more about [multi-status errors](https://developers.hubspot.com/docs/reference/api/other-resources/error-handling#multi-status-errors).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectWriteTraceId { get; set; }
#nullable restore
#else
        public string ObjectWriteTraceId { get; set; }
#endif
        /// <summary>The company property values to set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert_properties? Properties { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert_properties Properties { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert"/> and sets the default values.
        /// </summary>
        public SimplePublicObjectBatchInputUpsert()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "idProperty", n => { IdProperty = n.GetStringValue(); } },
                { "objectWriteTraceId", n => { ObjectWriteTraceId = n.GetStringValue(); } },
                { "properties", n => { Properties = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert_properties>(global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert_properties.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("idProperty", IdProperty);
            writer.WriteStringValue("objectWriteTraceId", ObjectWriteTraceId);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Companies.V202509.Models.SimplePublicObjectBatchInputUpsert_properties>("properties", Properties);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
