// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicPropertyAssociationInListFilter : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The coalescingRefineBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy? CoalescingRefineBy { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy CoalescingRefineBy { get; set; }
#endif
        /// <summary>The filterType property</summary>
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter_filterType? FilterType { get; set; }
        /// <summary>The listId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListId { get; set; }
#nullable restore
#else
        public string ListId { get; set; }
#endif
        /// <summary>The operator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Operator { get; set; }
#nullable restore
#else
        public string Operator { get; set; }
#endif
        /// <summary>The propertyWithObjectId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PropertyWithObjectId { get; set; }
#nullable restore
#else
        public string PropertyWithObjectId { get; set; }
#endif
        /// <summary>The toObjectTypeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ToObjectTypeId { get; set; }
#nullable restore
#else
        public string ToObjectTypeId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter"/> and sets the default values.
        /// </summary>
        public PublicPropertyAssociationInListFilter()
        {
            AdditionalData = new Dictionary<string, object>();
            FilterType = global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter_filterType.PROPERTY_ASSOCIATION;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "coalescingRefineBy", n => { CoalescingRefineBy = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy>(global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy.CreateFromDiscriminatorValue); } },
                { "filterType", n => { FilterType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter_filterType>(); } },
                { "listId", n => { ListId = n.GetStringValue(); } },
                { "operator", n => { Operator = n.GetStringValue(); } },
                { "propertyWithObjectId", n => { PropertyWithObjectId = n.GetStringValue(); } },
                { "toObjectTypeId", n => { ToObjectTypeId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy>("coalescingRefineBy", CoalescingRefineBy);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter_filterType>("filterType", FilterType);
            writer.WriteStringValue("listId", ListId);
            writer.WriteStringValue("operator", Operator);
            writer.WriteStringValue("propertyWithObjectId", PropertyWithObjectId);
            writer.WriteStringValue("toObjectTypeId", ToObjectTypeId);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteComparativeTimestampRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteRangedTimestampRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAllHistoryRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNumOccurrencesRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRangedTimeOperation"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeComparativeTimestampRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeRangedTimestampRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicSetOccurrencesRefineBy"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTimePointOperation"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PublicPropertyAssociationInListFilter_coalescingRefineBy : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteComparativeTimestampRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteComparativeTimestampRefineBy? PublicAbsoluteComparativeTimestampRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteComparativeTimestampRefineBy PublicAbsoluteComparativeTimestampRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteRangedTimestampRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteRangedTimestampRefineBy? PublicAbsoluteRangedTimestampRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteRangedTimestampRefineBy PublicAbsoluteRangedTimestampRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAllHistoryRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAllHistoryRefineBy? PublicAllHistoryRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAllHistoryRefineBy PublicAllHistoryRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNumOccurrencesRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNumOccurrencesRefineBy? PublicNumOccurrencesRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNumOccurrencesRefineBy PublicNumOccurrencesRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRangedTimeOperation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRangedTimeOperation? PublicRangedTimeOperation { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRangedTimeOperation PublicRangedTimeOperation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeComparativeTimestampRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeComparativeTimestampRefineBy? PublicRelativeComparativeTimestampRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeComparativeTimestampRefineBy PublicRelativeComparativeTimestampRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeRangedTimestampRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeRangedTimestampRefineBy? PublicRelativeRangedTimestampRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeRangedTimestampRefineBy PublicRelativeRangedTimestampRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicSetOccurrencesRefineBy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicSetOccurrencesRefineBy? PublicSetOccurrencesRefineBy { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicSetOccurrencesRefineBy PublicSetOccurrencesRefineBy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTimePointOperation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTimePointOperation? PublicTimePointOperation { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTimePointOperation PublicTimePointOperation { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationInListFilter.PublicPropertyAssociationInListFilter_coalescingRefineBy();
                if("PublicAbsoluteComparativeTimestampRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicAbsoluteComparativeTimestampRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteComparativeTimestampRefineBy();
                }
                else if("PublicAbsoluteRangedTimestampRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicAbsoluteRangedTimestampRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteRangedTimestampRefineBy();
                }
                else if("PublicAllHistoryRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicAllHistoryRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAllHistoryRefineBy();
                }
                else if("PublicNumOccurrencesRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicNumOccurrencesRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNumOccurrencesRefineBy();
                }
                else if("PublicRangedTimeOperation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicRangedTimeOperation = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRangedTimeOperation();
                }
                else if("PublicRelativeComparativeTimestampRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicRelativeComparativeTimestampRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeComparativeTimestampRefineBy();
                }
                else if("PublicRelativeRangedTimestampRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicRelativeRangedTimestampRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeRangedTimestampRefineBy();
                }
                else if("PublicSetOccurrencesRefineBy".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicSetOccurrencesRefineBy = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicSetOccurrencesRefineBy();
                }
                else if("PublicTimePointOperation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicTimePointOperation = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTimePointOperation();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PublicAbsoluteComparativeTimestampRefineBy != null)
                {
                    return PublicAbsoluteComparativeTimestampRefineBy.GetFieldDeserializers();
                }
                else if(PublicAbsoluteRangedTimestampRefineBy != null)
                {
                    return PublicAbsoluteRangedTimestampRefineBy.GetFieldDeserializers();
                }
                else if(PublicAllHistoryRefineBy != null)
                {
                    return PublicAllHistoryRefineBy.GetFieldDeserializers();
                }
                else if(PublicNumOccurrencesRefineBy != null)
                {
                    return PublicNumOccurrencesRefineBy.GetFieldDeserializers();
                }
                else if(PublicRangedTimeOperation != null)
                {
                    return PublicRangedTimeOperation.GetFieldDeserializers();
                }
                else if(PublicRelativeComparativeTimestampRefineBy != null)
                {
                    return PublicRelativeComparativeTimestampRefineBy.GetFieldDeserializers();
                }
                else if(PublicRelativeRangedTimestampRefineBy != null)
                {
                    return PublicRelativeRangedTimestampRefineBy.GetFieldDeserializers();
                }
                else if(PublicSetOccurrencesRefineBy != null)
                {
                    return PublicSetOccurrencesRefineBy.GetFieldDeserializers();
                }
                else if(PublicTimePointOperation != null)
                {
                    return PublicTimePointOperation.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
                if(PublicAbsoluteComparativeTimestampRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteComparativeTimestampRefineBy>(null, PublicAbsoluteComparativeTimestampRefineBy);
                }
                else if(PublicAbsoluteRangedTimestampRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAbsoluteRangedTimestampRefineBy>(null, PublicAbsoluteRangedTimestampRefineBy);
                }
                else if(PublicAllHistoryRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAllHistoryRefineBy>(null, PublicAllHistoryRefineBy);
                }
                else if(PublicNumOccurrencesRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNumOccurrencesRefineBy>(null, PublicNumOccurrencesRefineBy);
                }
                else if(PublicRangedTimeOperation != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRangedTimeOperation>(null, PublicRangedTimeOperation);
                }
                else if(PublicRelativeComparativeTimestampRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeComparativeTimestampRefineBy>(null, PublicRelativeComparativeTimestampRefineBy);
                }
                else if(PublicRelativeRangedTimestampRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRelativeRangedTimestampRefineBy>(null, PublicRelativeRangedTimestampRefineBy);
                }
                else if(PublicSetOccurrencesRefineBy != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicSetOccurrencesRefineBy>(null, PublicSetOccurrencesRefineBy);
                }
                else if(PublicTimePointOperation != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTimePointOperation>(null, PublicTimePointOperation);
                }
            }
        }
    }
}
#pragma warning restore CS0618
