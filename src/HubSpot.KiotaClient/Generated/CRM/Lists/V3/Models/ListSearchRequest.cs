// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models
{
    /// <summary>
    /// The request object used for searching through lists.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ListSearchRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The property names of any additional list properties to include in the response. Properties that do not exist or that are empty for a particular list are not included in the response.By default, all requests will fetch the following properties for each list: `hs_list_size`, `hs_last_record_added_at`, `hs_last_record_removed_at`, `hs_folder_name`, and `hs_list_reference_count`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AdditionalProperties { get; set; }
#nullable restore
#else
        public List<string> AdditionalProperties { get; set; }
#endif
        /// <summary>The number of lists to include in the response. Defaults to `20` if no value is provided. The max `count` is `500`.</summary>
        public int? Count { get; set; }
        /// <summary>The `listIds` that will be used to filter results by `listId`. If values are provided, then the response will only include results that have a `listId` in this array.If no value is provided, or if an empty list is provided, then the results will not be filtered by `listId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ListIds { get; set; }
#nullable restore
#else
        public List<string> ListIds { get; set; }
#endif
        /// <summary>Value used to paginate through lists. The `offset` provided in the response can be used in the next request to fetch the next page of results. Defaults to `0` if no offset is provided.</summary>
        public int? Offset { get; set; }
        /// <summary>The `processingTypes` that will be used to filter results by `processingType`. If values are provided, then the response will only include results that have a `processingType` in this array.If no value is provided, or if an empty list is provided, then results will not be filtered by `processingType`.Valid `processingTypes` are: `MANUAL`, `SNAPSHOT`, or `DYNAMIC`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProcessingTypes { get; set; }
#nullable restore
#else
        public List<string> ProcessingTypes { get; set; }
#endif
        /// <summary>The `query` that will be used to search for lists by list name. If no `query` is provided, then the results will include all lists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Query { get; set; }
#nullable restore
#else
        public string Query { get; set; }
#endif
        /// <summary>The sort property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sort { get; set; }
#nullable restore
#else
        public string Sort { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListSearchRequest"/> and sets the default values.
        /// </summary>
        public ListSearchRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListSearchRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListSearchRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListSearchRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additionalProperties", n => { AdditionalProperties = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "count", n => { Count = n.GetIntValue(); } },
                { "listIds", n => { ListIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "offset", n => { Offset = n.GetIntValue(); } },
                { "processingTypes", n => { ProcessingTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "query", n => { Query = n.GetStringValue(); } },
                { "sort", n => { Sort = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("additionalProperties", AdditionalProperties);
            writer.WriteIntValue("count", Count);
            writer.WriteCollectionOfPrimitiveValues<string>("listIds", ListIds);
            writer.WriteIntValue("offset", Offset);
            writer.WriteCollectionOfPrimitiveValues<string>("processingTypes", ProcessingTypes);
            writer.WriteStringValue("query", Query);
            writer.WriteStringValue("sort", Sort);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
