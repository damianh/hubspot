// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicIndexOffset : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The days property</summary>
        public int? Days { get; set; }
        /// <summary>The hours property</summary>
        public int? Hours { get; set; }
        /// <summary>The milliseconds property</summary>
        public int? Milliseconds { get; set; }
        /// <summary>The minutes property</summary>
        public int? Minutes { get; set; }
        /// <summary>The months property</summary>
        public int? Months { get; set; }
        /// <summary>The quarters property</summary>
        public int? Quarters { get; set; }
        /// <summary>The seconds property</summary>
        public int? Seconds { get; set; }
        /// <summary>The weeks property</summary>
        public int? Weeks { get; set; }
        /// <summary>The years property</summary>
        public int? Years { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset"/> and sets the default values.
        /// </summary>
        public PublicIndexOffset()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "days", n => { Days = n.GetIntValue(); } },
                { "hours", n => { Hours = n.GetIntValue(); } },
                { "milliseconds", n => { Milliseconds = n.GetIntValue(); } },
                { "minutes", n => { Minutes = n.GetIntValue(); } },
                { "months", n => { Months = n.GetIntValue(); } },
                { "quarters", n => { Quarters = n.GetIntValue(); } },
                { "seconds", n => { Seconds = n.GetIntValue(); } },
                { "weeks", n => { Weeks = n.GetIntValue(); } },
                { "years", n => { Years = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("days", Days);
            writer.WriteIntValue("hours", Hours);
            writer.WriteIntValue("milliseconds", Milliseconds);
            writer.WriteIntValue("minutes", Minutes);
            writer.WriteIntValue("months", Months);
            writer.WriteIntValue("quarters", Quarters);
            writer.WriteIntValue("seconds", Seconds);
            writer.WriteIntValue("weeks", Weeks);
            writer.WriteIntValue("years", Years);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
