// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ListCreateRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of custom properties to tie to the list. Custom property name is the key, the value is the value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest_customProperties? CustomProperties { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest_customProperties CustomProperties { get; set; }
#endif
        /// <summary>The filterBranch property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch? FilterBranch { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch FilterBranch { get; set; }
#endif
        /// <summary>The ID of the folder that the list should be created in. If left blank, then the list will be created in the root of the list folder structure.</summary>
        public int? ListFolderId { get; set; }
        /// <summary>The name of the list, which must be globally unique across all public lists in the portal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The object type ID of the type of objects that the list will store.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectTypeId { get; set; }
#nullable restore
#else
        public string ObjectTypeId { get; set; }
#endif
        /// <summary>The processing type of the list. One of: `SNAPSHOT`, `MANUAL`, or `DYNAMIC`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessingType { get; set; }
#nullable restore
#else
        public string ProcessingType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest"/> and sets the default values.
        /// </summary>
        public ListCreateRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customProperties", n => { CustomProperties = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest_customProperties>(global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest_customProperties.CreateFromDiscriminatorValue); } },
                { "filterBranch", n => { FilterBranch = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch>(global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch.CreateFromDiscriminatorValue); } },
                { "listFolderId", n => { ListFolderId = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "objectTypeId", n => { ObjectTypeId = n.GetStringValue(); } },
                { "processingType", n => { ProcessingType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest_customProperties>("customProperties", CustomProperties);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch>("filterBranch", FilterBranch);
            writer.WriteIntValue("listFolderId", ListFolderId);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("objectTypeId", ObjectTypeId);
            writer.WriteStringValue("processingType", ProcessingType);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAndFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAssociationFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAllFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAnyFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicOrFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRestrictedFilterBranch"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicUnifiedEventsFilterBranch"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ListCreateRequest_filterBranch : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAndFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAndFilterBranch? PublicAndFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAndFilterBranch PublicAndFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAssociationFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAssociationFilterBranch? PublicAssociationFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAssociationFilterBranch PublicAssociationFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAllFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAllFilterBranch? PublicNotAllFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAllFilterBranch PublicNotAllFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAnyFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAnyFilterBranch? PublicNotAnyFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAnyFilterBranch PublicNotAnyFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicOrFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicOrFilterBranch? PublicOrFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicOrFilterBranch PublicOrFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationFilterBranch? PublicPropertyAssociationFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationFilterBranch PublicPropertyAssociationFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRestrictedFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRestrictedFilterBranch? PublicRestrictedFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRestrictedFilterBranch PublicRestrictedFilterBranch { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicUnifiedEventsFilterBranch"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicUnifiedEventsFilterBranch? PublicUnifiedEventsFilterBranch { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicUnifiedEventsFilterBranch PublicUnifiedEventsFilterBranch { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.ListCreateRequest.ListCreateRequest_filterBranch();
                if("PublicAndFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicAndFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAndFilterBranch();
                }
                else if("PublicAssociationFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicAssociationFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAssociationFilterBranch();
                }
                else if("PublicNotAllFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicNotAllFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAllFilterBranch();
                }
                else if("PublicNotAnyFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicNotAnyFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAnyFilterBranch();
                }
                else if("PublicOrFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicOrFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicOrFilterBranch();
                }
                else if("PublicPropertyAssociationFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicPropertyAssociationFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationFilterBranch();
                }
                else if("PublicRestrictedFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicRestrictedFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRestrictedFilterBranch();
                }
                else if("PublicUnifiedEventsFilterBranch".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicUnifiedEventsFilterBranch = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicUnifiedEventsFilterBranch();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PublicAndFilterBranch != null)
                {
                    return PublicAndFilterBranch.GetFieldDeserializers();
                }
                else if(PublicAssociationFilterBranch != null)
                {
                    return PublicAssociationFilterBranch.GetFieldDeserializers();
                }
                else if(PublicNotAllFilterBranch != null)
                {
                    return PublicNotAllFilterBranch.GetFieldDeserializers();
                }
                else if(PublicNotAnyFilterBranch != null)
                {
                    return PublicNotAnyFilterBranch.GetFieldDeserializers();
                }
                else if(PublicOrFilterBranch != null)
                {
                    return PublicOrFilterBranch.GetFieldDeserializers();
                }
                else if(PublicPropertyAssociationFilterBranch != null)
                {
                    return PublicPropertyAssociationFilterBranch.GetFieldDeserializers();
                }
                else if(PublicRestrictedFilterBranch != null)
                {
                    return PublicRestrictedFilterBranch.GetFieldDeserializers();
                }
                else if(PublicUnifiedEventsFilterBranch != null)
                {
                    return PublicUnifiedEventsFilterBranch.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(PublicAndFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAndFilterBranch>(null, PublicAndFilterBranch);
                }
                else if(PublicAssociationFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicAssociationFilterBranch>(null, PublicAssociationFilterBranch);
                }
                else if(PublicNotAllFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAllFilterBranch>(null, PublicNotAllFilterBranch);
                }
                else if(PublicNotAnyFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNotAnyFilterBranch>(null, PublicNotAnyFilterBranch);
                }
                else if(PublicOrFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicOrFilterBranch>(null, PublicOrFilterBranch);
                }
                else if(PublicPropertyAssociationFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicPropertyAssociationFilterBranch>(null, PublicPropertyAssociationFilterBranch);
                }
                else if(PublicRestrictedFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicRestrictedFilterBranch>(null, PublicRestrictedFilterBranch);
                }
                else if(PublicUnifiedEventsFilterBranch != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicUnifiedEventsFilterBranch>(null, PublicUnifiedEventsFilterBranch);
                }
            }
        }
    }
}
#pragma warning restore CS0618
