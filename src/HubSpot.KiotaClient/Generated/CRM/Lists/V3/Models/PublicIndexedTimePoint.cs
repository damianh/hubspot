// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicIndexedTimePoint : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The indexReference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference? IndexReference { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference IndexReference { get; set; }
#endif
        /// <summary>The offset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset? Offset { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset Offset { get; set; }
#endif
        /// <summary>The timeType property</summary>
        public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint_timeType? TimeType { get; set; }
        /// <summary>The timezoneSource property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimezoneSource { get; set; }
#nullable restore
#else
        public string TimezoneSource { get; set; }
#endif
        /// <summary>The zoneId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneId { get; set; }
#nullable restore
#else
        public string ZoneId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint"/> and sets the default values.
        /// </summary>
        public PublicIndexedTimePoint()
        {
            AdditionalData = new Dictionary<string, object>();
            TimeType = global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint_timeType.INDEXED;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "indexReference", n => { IndexReference = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference>(global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference.CreateFromDiscriminatorValue); } },
                { "offset", n => { Offset = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset>(global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset.CreateFromDiscriminatorValue); } },
                { "timeType", n => { TimeType = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint_timeType>(); } },
                { "timezoneSource", n => { TimezoneSource = n.GetStringValue(); } },
                { "zoneId", n => { ZoneId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference>("indexReference", IndexReference);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexOffset>("offset", Offset);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint_timeType>("timeType", TimeType);
            writer.WriteStringValue("timezoneSource", TimezoneSource);
            writer.WriteStringValue("zoneId", ZoneId);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalQuarterReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalYearReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicMonthReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNowReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicQuarterReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTodayReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicWeekReference"/>, <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicYearReference"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PublicIndexedTimePoint_indexReference : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalQuarterReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalQuarterReference? PublicFiscalQuarterReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalQuarterReference PublicFiscalQuarterReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalYearReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalYearReference? PublicFiscalYearReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalYearReference PublicFiscalYearReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicMonthReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicMonthReference? PublicMonthReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicMonthReference PublicMonthReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNowReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNowReference? PublicNowReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNowReference PublicNowReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicQuarterReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicQuarterReference? PublicQuarterReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicQuarterReference PublicQuarterReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTodayReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTodayReference? PublicTodayReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTodayReference PublicTodayReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicWeekReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicWeekReference? PublicWeekReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicWeekReference PublicWeekReference { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicYearReference"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicYearReference? PublicYearReference { get; set; }
#nullable restore
#else
            public global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicYearReference PublicYearReference { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicIndexedTimePoint.PublicIndexedTimePoint_indexReference();
                if("PublicFiscalQuarterReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicFiscalQuarterReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalQuarterReference();
                }
                else if("PublicFiscalYearReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicFiscalYearReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalYearReference();
                }
                else if("PublicMonthReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicMonthReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicMonthReference();
                }
                else if("PublicNowReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicNowReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNowReference();
                }
                else if("PublicQuarterReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicQuarterReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicQuarterReference();
                }
                else if("PublicTodayReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicTodayReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTodayReference();
                }
                else if("PublicWeekReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicWeekReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicWeekReference();
                }
                else if("PublicYearReference".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PublicYearReference = new global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicYearReference();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PublicFiscalQuarterReference != null)
                {
                    return PublicFiscalQuarterReference.GetFieldDeserializers();
                }
                else if(PublicFiscalYearReference != null)
                {
                    return PublicFiscalYearReference.GetFieldDeserializers();
                }
                else if(PublicMonthReference != null)
                {
                    return PublicMonthReference.GetFieldDeserializers();
                }
                else if(PublicNowReference != null)
                {
                    return PublicNowReference.GetFieldDeserializers();
                }
                else if(PublicQuarterReference != null)
                {
                    return PublicQuarterReference.GetFieldDeserializers();
                }
                else if(PublicTodayReference != null)
                {
                    return PublicTodayReference.GetFieldDeserializers();
                }
                else if(PublicWeekReference != null)
                {
                    return PublicWeekReference.GetFieldDeserializers();
                }
                else if(PublicYearReference != null)
                {
                    return PublicYearReference.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
                if(PublicFiscalQuarterReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalQuarterReference>(null, PublicFiscalQuarterReference);
                }
                else if(PublicFiscalYearReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicFiscalYearReference>(null, PublicFiscalYearReference);
                }
                else if(PublicMonthReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicMonthReference>(null, PublicMonthReference);
                }
                else if(PublicNowReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicNowReference>(null, PublicNowReference);
                }
                else if(PublicQuarterReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicQuarterReference>(null, PublicQuarterReference);
                }
                else if(PublicTodayReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicTodayReference>(null, PublicTodayReference);
                }
                else if(PublicWeekReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicWeekReference>(null, PublicWeekReference);
                }
                else if(PublicYearReference != null)
                {
                    writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.CRM.Lists.V3.Models.PublicYearReference>(null, PublicYearReference);
                }
            }
        }
    }
}
#pragma warning restore CS0618
