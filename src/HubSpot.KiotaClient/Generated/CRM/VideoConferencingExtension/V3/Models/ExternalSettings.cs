// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.CRM.VideoConferencingExtension.V3.Models
{
    /// <summary>
    /// The URLs of the various actions provided by the video conferencing application. All URLs must use the `https` protocol.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ExternalSettings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The URL that HubSpot will send requests to create a new video conference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreateMeetingUrl { get; set; }
#nullable restore
#else
        public string CreateMeetingUrl { get; set; }
#endif
        /// <summary>The URL that HubSpot will send notifications of meetings that have been deleted in HubSpot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeleteMeetingUrl { get; set; }
#nullable restore
#else
        public string DeleteMeetingUrl { get; set; }
#endif
        /// <summary>The fetchAccountsUri property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FetchAccountsUri { get; set; }
#nullable restore
#else
        public string FetchAccountsUri { get; set; }
#endif
        /// <summary>The URL that HubSpot will send updates to existing meetings. Typically called when the user changes the topic or times of a meeting.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdateMeetingUrl { get; set; }
#nullable restore
#else
        public string UpdateMeetingUrl { get; set; }
#endif
        /// <summary>The URL that HubSpot will use to verify that a user exists in the video conference application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserVerifyUrl { get; set; }
#nullable restore
#else
        public string UserVerifyUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.CRM.VideoConferencingExtension.V3.Models.ExternalSettings"/> and sets the default values.
        /// </summary>
        public ExternalSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.CRM.VideoConferencingExtension.V3.Models.ExternalSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.CRM.VideoConferencingExtension.V3.Models.ExternalSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.CRM.VideoConferencingExtension.V3.Models.ExternalSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createMeetingUrl", n => { CreateMeetingUrl = n.GetStringValue(); } },
                { "deleteMeetingUrl", n => { DeleteMeetingUrl = n.GetStringValue(); } },
                { "fetchAccountsUri", n => { FetchAccountsUri = n.GetStringValue(); } },
                { "updateMeetingUrl", n => { UpdateMeetingUrl = n.GetStringValue(); } },
                { "userVerifyUrl", n => { UserVerifyUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("createMeetingUrl", CreateMeetingUrl);
            writer.WriteStringValue("deleteMeetingUrl", DeleteMeetingUrl);
            writer.WriteStringValue("fetchAccountsUri", FetchAccountsUri);
            writer.WriteStringValue("updateMeetingUrl", UpdateMeetingUrl);
            writer.WriteStringValue("userVerifyUrl", UserVerifyUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
