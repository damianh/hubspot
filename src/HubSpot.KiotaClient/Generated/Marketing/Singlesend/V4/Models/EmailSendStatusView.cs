// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models
{
    /// <summary>
    /// Describes the status of an email send request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EmailSendStatusView : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time when the send was completed.</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>The ID of a send event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EventIdView? EventId { get; set; }
#nullable restore
#else
        public global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EventIdView EventId { get; set; }
#endif
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>Time when the send was requested.</summary>
        public DateTimeOffset? RequestedAt { get; set; }
        /// <summary>Result of the send.</summary>
        public global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView_sendResult? SendResult { get; set; }
        /// <summary>Time when the send began processing.</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>Status of the send request.</summary>
        public global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView_status? Status { get; set; }
        /// <summary>Identifier used to query the status of the send.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusId { get; set; }
#nullable restore
#else
        public string StatusId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView"/> and sets the default values.
        /// </summary>
        public EmailSendStatusView()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "completedAt", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "eventId", n => { EventId = n.GetObjectValue<global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EventIdView>(global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EventIdView.CreateFromDiscriminatorValue); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "requestedAt", n => { RequestedAt = n.GetDateTimeOffsetValue(); } },
                { "sendResult", n => { SendResult = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView_sendResult>(); } },
                { "startedAt", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView_status>(); } },
                { "statusId", n => { StatusId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("completedAt", CompletedAt);
            writer.WriteObjectValue<global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EventIdView>("eventId", EventId);
            writer.WriteStringValue("message", Message);
            writer.WriteDateTimeOffsetValue("requestedAt", RequestedAt);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView_sendResult>("sendResult", SendResult);
            writer.WriteDateTimeOffsetValue("startedAt", StartedAt);
            writer.WriteEnumValue<global::DamianH.HubSpot.KiotaClient.Marketing.Singlesend.V4.Models.EmailSendStatusView_status>("status", Status);
            writer.WriteStringValue("statusId", StatusId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
