// <auto-generated/>
#pragma warning disable CS0618
using DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.Item;
using DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens
{
    /// <summary>
    /// Builds and executes requests for operations under \marketing\v3\transactional\smtp-tokens
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SmtpTokensRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.marketing.v3.transactional.smtpTokens.item collection</summary>
        /// <param name="position">Identifier generated when a token is created.</param>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.Item.WithTokenItemRequestBuilder"/></returns>
        public global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.Item.WithTokenItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("tokenId", position);
                return new global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.Item.WithTokenItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SmtpTokensRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/marketing/v3/transactional/smtp-tokens{?after*,campaignName*,emailCampaignId*,limit*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SmtpTokensRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/marketing/v3/transactional/smtp-tokens{?after*,campaignName*,emailCampaignId*,limit*}", rawUrl)
        {
        }
        /// <summary>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.CollectionResponseSmtpApiTokenViewForwardPaging"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.CollectionResponseSmtpApiTokenViewForwardPaging?> GetAsync(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder.SmtpTokensRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.CollectionResponseSmtpApiTokenViewForwardPaging> GetAsync(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder.SmtpTokensRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.CollectionResponseSmtpApiTokenViewForwardPaging>(requestInfo, global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.CollectionResponseSmtpApiTokenViewForwardPaging.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenView"/></returns>
        /// <param name="body">A request object to create a SMTP API token</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenView?> PostAsync(global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenRequestEgg body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenView> PostAsync(global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenRequestEgg body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenView>(requestInfo, global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenView.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder.SmtpTokensRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder.SmtpTokensRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">A request object to create a SMTP API token</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenRequestEgg body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Models.SmtpApiTokenRequestEgg body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder WithUrl(string rawUrl)
        {
            return new global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SmtpTokensRequestBuilderGetQueryParameters 
        {
            /// <summary>Starting point to get the next set of results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("after")]
            public string? After { get; set; }
#nullable restore
#else
            [QueryParameter("after")]
            public string After { get; set; }
#endif
            /// <summary>A name for the campaign tied to the SMTP API token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("campaignName")]
            public string? CampaignName { get; set; }
#nullable restore
#else
            [QueryParameter("campaignName")]
            public string CampaignName { get; set; }
#endif
            /// <summary>Identifier assigned to the campaign provided during the token creation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("emailCampaignId")]
            public string? EmailCampaignId { get; set; }
#nullable restore
#else
            [QueryParameter("emailCampaignId")]
            public string EmailCampaignId { get; set; }
#endif
            /// <summary>Maximum number of tokens to return.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SmtpTokensRequestBuilderGetRequestConfiguration : RequestConfiguration<global::DamianH.HubSpot.KiotaClient.Marketing.TransactionalSingleSend.V3.Marketing.V3.Transactional.SmtpTokens.SmtpTokensRequestBuilder.SmtpTokensRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SmtpTokensRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
