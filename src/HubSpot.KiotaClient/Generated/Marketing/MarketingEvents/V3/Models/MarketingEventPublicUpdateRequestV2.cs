// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MarketingEventPublicUpdateRequestV2 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The customProperties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.PropertyValue>? CustomProperties { get; set; }
#nullable restore
#else
        public List<global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.PropertyValue> CustomProperties { get; set; }
#endif
        /// <summary>The endDateTime property</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>The eventCancelled property</summary>
        public bool? EventCancelled { get; set; }
        /// <summary>The eventDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventDescription { get; set; }
#nullable restore
#else
        public string EventDescription { get; set; }
#endif
        /// <summary>The eventName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventName { get; set; }
#nullable restore
#else
        public string EventName { get; set; }
#endif
        /// <summary>The eventOrganizer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventOrganizer { get; set; }
#nullable restore
#else
        public string EventOrganizer { get; set; }
#endif
        /// <summary>The eventType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventType { get; set; }
#nullable restore
#else
        public string EventType { get; set; }
#endif
        /// <summary>The eventUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventUrl { get; set; }
#nullable restore
#else
        public string EventUrl { get; set; }
#endif
        /// <summary>The startDateTime property</summary>
        public DateTimeOffset? StartDateTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.MarketingEventPublicUpdateRequestV2"/> and sets the default values.
        /// </summary>
        public MarketingEventPublicUpdateRequestV2()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.MarketingEventPublicUpdateRequestV2"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.MarketingEventPublicUpdateRequestV2 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.MarketingEventPublicUpdateRequestV2();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customProperties", n => { CustomProperties = n.GetCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.PropertyValue>(global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.PropertyValue.CreateFromDiscriminatorValue)?.AsList(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "eventCancelled", n => { EventCancelled = n.GetBoolValue(); } },
                { "eventDescription", n => { EventDescription = n.GetStringValue(); } },
                { "eventName", n => { EventName = n.GetStringValue(); } },
                { "eventOrganizer", n => { EventOrganizer = n.GetStringValue(); } },
                { "eventType", n => { EventType = n.GetStringValue(); } },
                { "eventUrl", n => { EventUrl = n.GetStringValue(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::DamianH.HubSpot.KiotaClient.Marketing.MarketingEvents.V3.Models.PropertyValue>("customProperties", CustomProperties);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteBoolValue("eventCancelled", EventCancelled);
            writer.WriteStringValue("eventDescription", EventDescription);
            writer.WriteStringValue("eventName", EventName);
            writer.WriteStringValue("eventOrganizer", EventOrganizer);
            writer.WriteStringValue("eventType", EventType);
            writer.WriteStringValue("eventUrl", EventUrl);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
